#!/usr/bin/env zsh
autoload -U colors
colors

## Begin parsing arguments

zparseopts -D -E -- -name:=name -ip:=floating_ip -size:=droplet_size -region:=region -key:=ssh_key -help:=help

cmd=$1
name=$name[2]
floating_ip=$floating_ip[2]
droplet_size=$droplet_size[2]
region=$region[2]
ssh_key=$ssh_key[2]

snapshot_name="$name-snapshot"

if [ -z $help[1] ]; then
  help=false
else
  help=true
fi

## End parsing arguments

# log
prompt="$fg_bold[black]>$fg_no_bold[default]"
l () {
  echo "$prompt $1"
}

error () {
  l "${fg[red]}error$fg_no_bold[default] $1"
}

warning () {
  l "${fg[magenta]}warning$fg_no_bold[default] $1"
}

success () {
  l "${fg[green]}âœ”$fg_no_bold[default] $1"
}

highlight () {
  echo "$fg_no_bold[yellow]$1$fg_no_bold[default]"
}

get_snapshot () {
  doctl compute image list -ojson | jq --arg name $snapshot_name '.[] | select(.name == $name).id' -r
}

create_droplet () {
  doctl compute droplet create \
    --image $image \
    --size $droplet_size \
    --region $region \
    --ssh-keys $ssh_key \
    --wait \
    --enable-monitoring \
    --output json \
    $name | jq '.[0].id' -r
}

existing_droplet () {
  doctl compute droplet list -ojson | jq --arg name $name '.[] | select(.name == $name).id' -r
}

assign_ip () {
  l "Assigning IP `highlight $floating_ip` to droplet `highlight $1`"
  local res=$(doctl compute floating-ip-action assign $floating_ip $1 -o json)

  local error=$(jq 'if type=="object" and .errors then .errors[0].detail else "Unknown error" end' -r <<< $res)
  local op_id=$(jq 'if type=="array" then .[0].id else "empty" end' -r <<< $res)
  if [ $error != "Unknown error" ] || [ $op_id = "empty" ]; then
    error "$error"
    l "Failed command: \`doctl compute floating-ip-action assign $floating_ip $1 -o json\`"
    exit 1
  fi

  get_status () {
    doctl compute floating-ip-action get $floating_ip $op_id -o json | jq '.[0].status' -r
  }

  local assign_status=$(get_status)

  for i in {1..5}; do
    sleep 1
    assign_status=$(get_status)

    if [ "$assign_status" = "completed" ]; then
      break
    else
      success "IP `highlight $floating_ip` Assigned"
    fi
  done

  if [ "$assign_status" != "completed" ]; then
    error "IP Assignment incomplete"
    exit 1
  fi
}

droplet_status () {
  doctl compute droplet get -ojson $1 | jq '.[0].status' -r
}

power_down () {
  doctl compute droplet-action power-off $1 --wait -ojson > /dev/null
  l "Powered down droplet `highlight $1`"
}

check_status () {
  if [ -z $1 ]; then
    echo 'Could not find existing droplet'
    exit 1
  fi

  if [ $(droplet_status $1) = "active" ]; then
    warning "Your droplet should be powered down before snapshotting."
    if read -q "?$prompt Do you want to power down your droplet? (y/N) "; then
      echo ''
      l "Powering down droplet `highlight $1`"
      power_down $1
    else
      exit 1
    fi
  fi
}

create_snapshot () {
  l "Creating snapshot (this could take a few minutes...)"
  doctl compute droplet-action snapshot $droplet_id --wait --snapshot-name $snapshot_name > /dev/null
  success "Created snapshot `highlight $snapshot_name`"
}

delete_droplet () {
  doctl compute droplet delete $1 --force
  success "Deleted droplet `highlight $1`"
}

delete_snapshot () {
  doctl compute image delete $1 --force
  success "Deleted snapshot `highlight $1`"
}

up () {
  local existing_droplet=$(existing_droplet)
  local droplet_id

  if [ -z $existing_droplet ]; then
    l "Creating $name droplet"
    local image=$(get_snapshot)

    if [ -z $image ]; then
      error "Could not find snapshot"
      exit 1
    else
      l "Using snapshot `highlight $image`"
    fi

    droplet_id="$(create_droplet $image)"

    success "Created droplet `highlight $droplet_id`"
  else
    droplet_id="$existing_droplet"
    l "Using droplet `highlight $droplet_id`"
  fi

  if [ -n "$floating_ip" ]; then
    assign_ip $droplet_id
  fi

  echo ''
  l "Use `highlight "doctl compute ssh $droplet_id"` to login to your new droplet!"
}

down () {
  local existing_snapshot=$(get_snapshot)
  local droplet_id=$(existing_droplet)

  check_status $droplet_id

  if read -q "confirm_delete?$prompt Are you sure you want to delete droplet `highlight $droplet_id`? (y/N) "; then
    echo ''
  else
    echo $confirm_delete
    exit 0
  fi

  create_snapshot
  delete_droplet $droplet_id

  if [ -n $existing_snapshot ]; then
    delete_snapshot $existing_snapshot
  fi
}

help () {
  echo 'spinner-upper is a command line tool to automatically spin up and down Digital Ocean droplets'
  echo ''
  echo 'Usage:'
  echo '  spinner-upper <command> [flags]'
  echo ''
  echo 'Available commands:'
  echo '  up    Create a new droplet from the last snapshot'
  echo '  down  Save a snapshot and destroy the droplet'
  echo ''
  echo 'Flags:'
  echo '  --name    name'
  echo '  --ip      floating IP  (doctl compute floating-ip list)'
  echo '  --size    droplet size (doctl compute size list)'
  echo '  --region  region       (doctl compute region list)'
  echo '  --key     SSH key ID   (doctl compute ssh-key list)'
}

run () {
  if [[ -z "$(command -v doctl)" ]]; then
    error "Install `highlight "doctl"` to continue"
    exit 1
  fi

  if $help || [ -z $cmd ] || [ $cmd = "--help" ]; then help
  elif [ "$cmd" = "up" ]; then
    if [ -z $name ] \
    || [ -z $droplet_size ] \
    || [ -z $region ]
    then
      error '--name, --size & --region arguments required. Use --help to learn more'
    else
      up
    fi
  elif [ "$cmd" = "down" ]; then
    if [ -z $name ]
    then
      error '--name argument required. Use --help to learn more'
    else
      down
    fi
  else
    error "Command $cmd not recognised."
    l 'Use --help flag to learn more.'
  fi
}

run
